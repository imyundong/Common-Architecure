''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' File          : COverrideCode.vb
' Class         : COverrideCode
' Description   : Table : OverrideCode, This Class is Generated By DBCG Tools Automatically
' Author        : Su Jia
' Creation Ver  : 2.1.0.0
'
' Revision History
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Version       Date                 User
' $Log: COverrideCode.vb,v $
' Revision 1.0  2012/08/24           Su Jia
' Initial Version
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Imports ServerPlatform.Library.Utility
Imports ServerPlatform.Library.Workflow

Public Class COverrideCode
    Implements ICloneable
    Private Curser As New List(Of Object)

    Public Property Code As String
    Public Property OverrideDescription As String
    Public Property Capability As Integer
    Public Property Condition As String

    Public Sub New()
        Code = ""
        OverrideDescription = ""
        Capability = 0
        Condition = ""
    End Sub

    Private Sub ToSqlPK(ByRef DBStruct As COverrideCodeStruct)
        DBStruct.Code = Code
    End Sub

    Private Sub ToSql(ByRef DBStruct As COverrideCodeStruct)
        ToSqlPK(DBStruct)
        DBStruct.OverrideDescription = OverrideDescription
        DBStruct.Capability = Capability
        DBStruct.Condition = Condition
    End Sub

    Private Sub FromSql(ByVal DBStruct As COverrideCodeStruct)
        Code = DBStruct.Code
        OverrideDescription = DBStruct.OverrideDescription
        Capability = DBStruct.Capability
        Condition = DBStruct.Condition
    End Sub

    Public Sub Insert(ByRef DatabaseFactory As CDatabaseFactory)
        Dim StructObj As New COverrideCodeStruct
        ToSql(StructObj)

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        DBAccessClass.Insert(DatabaseFactory.CreateInstance, StructObj)
    End Sub

    Public Sub Update(ByRef DatabaseFactory As CDatabaseFactory)
        Dim StructObj As New COverrideCodeStruct
        ToSql(StructObj)

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        DBAccessClass.Update(DatabaseFactory.CreateInstance, StructObj)
    End Sub

    Public Sub Remove(ByRef DatabaseFactory As CDatabaseFactory)
        Dim StructObj As New COverrideCodeStruct
        ToSql(StructObj)

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        DBAccessClass.Remove(DatabaseFactory.CreateInstance, StructObj)
    End Sub

    Public Sub Search(ByRef DatabaseFactory As CDatabaseFactory, _
                    ByVal Code As String, _
                    ByVal Lock As Boolean?)

        Dim StructObj As New COverrideCodeStruct
        Me.Code = Code
        ToSqlPK(StructObj)

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        DBAccessClass.Search(DatabaseFactory.CreateInstance, StructObj, Lock)
        FromSql(StructObj)
    End Sub

    Public Shared Sub SearchAll(ByRef DatabaseFactory As CDatabaseFactory, ByRef ObjList As List(Of COverrideCode))

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary("OverrideCode")

        Dim StructObjList As New List(Of Object)
        DBAccessClass.SearchAll(DatabaseFactory.CreateInstance, StructObjList)

        For Each StructObj As COverrideCodeStruct In StructObjList
            Dim Obj As New COverrideCode
            Obj.FromSql(StructObj)
            ObjList.Add(Obj)
        Next
    End Sub


    Public Function Count(ByRef DatabaseFactory As CDatabaseFactory) As Integer

        Dim StructObj As New COverrideCodeStruct

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        Return DBAccessClass.Count(DatabaseFactory.CreateInstance)
    End Function

    Public ReadOnly Property ClassName As String
        Get
            Return "OverrideCode"
        End Get
    End Property

    Public Overridable Function Clone() As Object Implements ICloneable.Clone
        Dim OverrideCode As New COverrideCode
        OverrideCode.Code = Code
        OverrideCode.OverrideDescription = OverrideDescription
        OverrideCode.Capability = Capability
        OverrideCode.Condition = Condition
        Return OverrideCode
    End Function

#Region "User Defined Code"
    Property OverrideType As Type
#End Region


End Class

