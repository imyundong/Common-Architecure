''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' File          : CBrokerPr.vb
' Class         : CBrokerPr
' Description   : Table : BrokerPr, This Class is Generated By DBCG Tools Automatically
' Author        : Su Jia
' Creation Ver  : 2.1.0.0
'
' Revision History
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Version       Date                 User
' $Log: CBrokerPr.vb,v $
' Revision 1.0  2012/08/24           Su Jia
' Initial Version
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Imports ServerPlatform.Library.Utility
Imports ServerPlatform.Library.Workflow

Public Class CBrokerPr
    Implements ICloneable
    Private Curser As New List(Of Object)

    Public Property branchcd As String
    Public Property brokercd As String
    Public Property brokername As String

    Public Sub New()
        branchcd = ""
        brokercd = ""
        brokername = ""
    End Sub

    Private Sub ToSqlPK(ByRef DBStruct As CBrokerPrStruct)
        DBStruct.branchcd = branchcd
        DBStruct.brokercd = brokercd
    End Sub

    Private Sub ToSql(ByRef DBStruct As CBrokerPrStruct)
        ToSqlPK(DBStruct)
        DBStruct.brokername = brokername
    End Sub

    Private Sub FromSql(ByVal DBStruct As CBrokerPrStruct)
        branchcd = DBStruct.branchcd
        brokercd = DBStruct.brokercd
        brokername = DBStruct.brokername
    End Sub

    Public Sub Insert(ByRef DatabaseFactory As CDatabaseFactory)
        Dim StructObj As New CBrokerPrStruct
        ToSql(StructObj)

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        DBAccessClass.Insert(DatabaseFactory.CreateInstance, StructObj)
    End Sub

    Public Sub Update(ByRef DatabaseFactory As CDatabaseFactory)
        Dim StructObj As New CBrokerPrStruct
        ToSql(StructObj)

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        DBAccessClass.Update(DatabaseFactory.CreateInstance, StructObj)
    End Sub

    Public Sub Remove(ByRef DatabaseFactory As CDatabaseFactory)
        Dim StructObj As New CBrokerPrStruct
        ToSql(StructObj)

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        DBAccessClass.Update(DatabaseFactory.CreateInstance, StructObj)
    End Sub

    Public Sub Search(ByRef DatabaseFactory As CDatabaseFactory, _
                    ByVal branchcd As String, _
                    ByVal brokercd As String, _
                    ByVal Lock As Boolean?)

        Dim StructObj As New CBrokerPrStruct
        Me.branchcd = branchcd
        Me.brokercd = brokercd
        ToSqlPK(StructObj)

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        DBAccessClass.Search(DatabaseFactory.CreateInstance, StructObj, Lock)
        FromSql(StructObj)
    End Sub

    Public Sub SearchAll(ByRef DatabaseFactory As CDatabaseFactory, ByRef ObjList As List(Of CBrokerPr))

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)

        Dim StructObjList As New List(Of Object)
        DBAccessClass.SearchAll(DatabaseFactory.CreateInstance, StructObjList)

        For Each StructObj As CBrokerPrStruct In StructObjList
            Dim Obj As New CBrokerPr
            Obj.FromSql(StructObj)
            ObjList.Add(Obj)
        Next
    End Sub


    Public Sub SearchgetBrokername(ByRef DatabaseFactory As CDatabaseFactory, _
                    ByVal branchcd As String, _
                    ByVal brokercd As String, _
                    ByVal Index As Integer, ByVal Lock As Boolean?, Optional ByVal MaxRecord As Integer = 0)
        If Curser.Count > 0 Then
            If Index <= Curser.Count - 1 Then
                FromSql(Curser.Item(Index))
                Exit Sub
            Else
                Throw New CError.CBusinessException(CError.CErrorCode.RECORD_NOT_FOUND, "Index Out Of Range")
            End If
        End If

        Dim StructObj As New CBrokerPrStruct
        StructObj.branchcd = branchcd
        StructObj.brokercd = brokercd
        StructObj.MaxRecord = MaxRecord

        Dim DBAccessClass As Object = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        DBAccessClass.SearchgetBrokername(DatabaseFactory.CreateInstance, StructObj, Curser, Lock)

        FromSql(Curser.Item(Index))

    End Sub

    Public Function Count(ByRef DatabaseFactory As CDatabaseFactory) As Integer

        Dim StructObj As New CBrokerPrStruct

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        Return DBAccessClass.Count(DatabaseFactory.CreateInstance)
    End Function

    Public ReadOnly Property ClassName As String
        Get
            Return "BrokerPr"
        End Get
    End Property

    Public Function Clone() As Object Implements ICloneable.Clone
        Dim BrokerPr As New CBrokerPr
        BrokerPr.branchcd = branchcd
        BrokerPr.brokercd = brokercd
        BrokerPr.brokername = brokername
        Return BrokerPr
    End Function



End Class

