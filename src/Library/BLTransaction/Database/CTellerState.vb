''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' File          : CTellerState.vb
' Class         : CTellerState
' Description   : Table : TellerState, This Class is Generated By DBCG Tools Automatically
' Author        : Su Jia
' Creation Ver  : 2.1.0.0
'
' Revision History
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Version       Date                 User
' $Log: CTellerState.vb,v $
' Revision 1.0  2012/08/24           Su Jia
' Initial Version
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Imports ServerPlatform.Library.Utility
Imports ServerPlatform.Library.Workflow

Public Class CTellerState
    Implements ICloneable
    Private Curser As New List(Of Object)

    Public Property TellerID As String
    Public Property TellerRoleID As Integer
    Public Property CurrentBranch As Integer
    Public Property ParentBranch As Integer

    Public Sub New()
        TellerID = "0"
        TellerRoleID = 0
        CurrentBranch = 0
        ParentBranch = 0
    End Sub

    Private Sub ToSqlPK(ByRef DBStruct As CTellerStateStruct)
    End Sub

    Private Sub ToSql(ByRef DBStruct As CTellerStateStruct)
        ToSqlPK(DBStruct)
        DBStruct.TellerID = TellerID
        DBStruct.TellerRoleID = TellerRoleID
        DBStruct.CurrentBranch = CurrentBranch
        DBStruct.ParentBranch = ParentBranch
    End Sub

    Private Sub FromSql(ByVal DBStruct As CTellerStateStruct)
        TellerID = DBStruct.TellerID
        TellerRoleID = DBStruct.TellerRoleID
        CurrentBranch = DBStruct.CurrentBranch
        ParentBranch = DBStruct.ParentBranch
    End Sub

    Public Sub Insert(ByRef DatabaseFactory As CDatabaseFactory)
        Dim StructObj As New CTellerStateStruct
        ToSql(StructObj)

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        DBAccessClass.Insert(DatabaseFactory.CreateInstance, StructObj)
    End Sub

    Public Sub Update(ByRef DatabaseFactory As CDatabaseFactory)
        Dim StructObj As New CTellerStateStruct
        ToSql(StructObj)

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        DBAccessClass.Update(DatabaseFactory.CreateInstance, StructObj)
    End Sub

    Public Sub Remove(ByRef DatabaseFactory As CDatabaseFactory)
        Dim StructObj As New CTellerStateStruct
        ToSql(StructObj)

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        DBAccessClass.Update(DatabaseFactory.CreateInstance, StructObj)
    End Sub

    Public Sub Search(ByRef DatabaseFactory As CDatabaseFactory, _
                    ByVal Lock As Boolean?)

        Dim StructObj As New CTellerStateStruct
        ToSqlPK(StructObj)

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        DBAccessClass.Search(DatabaseFactory.CreateInstance, StructObj, Lock)
        FromSql(StructObj)
    End Sub

    Public Sub SearchAll(ByRef DatabaseFactory As CDatabaseFactory, ByRef ObjList As List(Of CTellerState))

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)

        Dim StructObjList As New List(Of Object)
        DBAccessClass.SearchAll(DatabaseFactory.CreateInstance, StructObjList)

        For Each StructObj As CTellerStateStruct In StructObjList
            Dim Obj As New CTellerState
            Obj.FromSql(StructObj)
            ObjList.Add(Obj)
        Next
    End Sub


    Public Sub SearchByCurrentBranchAndRole(ByRef DatabaseFactory As CDatabaseFactory, _
                    ByVal CurrentBranch As Integer, _
                    ByVal TellerRoleID As Integer, _
                    ByVal Index As Integer, ByVal Lock As Boolean?, Optional ByVal MaxRecord As Integer = 0)
        If Curser.Count > 0 Then
            If Index <= Curser.Count - 1 Then
                FromSql(Curser.Item(Index))
                Exit Sub
            Else
                Throw New CError.CBusinessException(CError.CErrorCode.RECORD_NOT_FOUND, "Index Out Of Range")
            End If
        End If

        Dim StructObj As New CTellerStateStruct
        StructObj.CurrentBranch = CurrentBranch
        StructObj.TellerRoleID = TellerRoleID
        StructObj.MaxRecord = MaxRecord

        Dim DBAccessClass As Object = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        DBAccessClass.SearchByCurrentBranchAndRole(DatabaseFactory.CreateInstance, StructObj, Curser, Lock)

        FromSql(Curser.Item(Index))

    End Sub

    Public Sub SearchByParentBranchAndRole(ByRef DatabaseFactory As CDatabaseFactory, _
                    ByVal ParentBranch As Integer, _
                    ByVal TellerRoleID As Integer, _
                    ByVal Index As Integer, ByVal Lock As Boolean?, Optional ByVal MaxRecord As Integer = 0)
        If Curser.Count > 0 Then
            If Index <= Curser.Count - 1 Then
                FromSql(Curser.Item(Index))
                Exit Sub
            Else
                Throw New CError.CBusinessException(CError.CErrorCode.RECORD_NOT_FOUND, "Index Out Of Range")
            End If
        End If

        Dim StructObj As New CTellerStateStruct
        StructObj.ParentBranch = ParentBranch
        StructObj.TellerRoleID = TellerRoleID
        StructObj.MaxRecord = MaxRecord

        Dim DBAccessClass As Object = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        DBAccessClass.SearchByParentBranchAndRole(DatabaseFactory.CreateInstance, StructObj, Curser, Lock)

        FromSql(Curser.Item(Index))

    End Sub

    Public Function Count(ByRef DatabaseFactory As CDatabaseFactory) As Integer

        Dim StructObj As New CTellerStateStruct

        Dim DBAccessClass As IDatabaseAccess = DatabaseFactory.GetDatabaseAccessLibrary(ClassName)
        Return DBAccessClass.Count(DatabaseFactory.CreateInstance)
    End Function

    Public ReadOnly Property ClassName As String
        Get
            Return "TellerState"
        End Get
    End Property

    Public Function Clone() As Object Implements ICloneable.Clone
        Dim TellerState As New CTellerState
        TellerState.TellerID = TellerID
        TellerState.TellerRoleID = TellerRoleID
        TellerState.CurrentBranch = CurrentBranch
        TellerState.ParentBranch = ParentBranch
        Return TellerState
    End Function



End Class

