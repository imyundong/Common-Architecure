''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' File          : COverrideHistory.vb
' Class         : COverrideHistory
' Description   : Table    OverrideHistory
'               : Database SQLServer
'               : This Class is Generated By DBCG Tools Automatically
' Author        : Su Jia
' Creation Ver  : 2.1.0.0
'
' Revision History
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Version       Date                 User
' $Log: COverrideHistory.vb,v $
' Revision 1.0  2012/08/24           Su Jia
' Initial Version
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Imports ServerPlatform.Library.Utility
Imports ServerPlatform.Library.Workflow.CError

Public Class COverrideHistorySQLServer
    Inherits COverrideHistoryStruct
    Implements IDatabaseAccess
    Implements IComponent

    Public Sub Insert(ByVal Adapter As IDatabaseAdapter, ByRef Obj As Object) _
        Implements IDatabaseAccess.Insert

        Dim StructObj As COverrideHistoryStruct = TryCast(Obj, COverrideHistoryStruct)

        Dim SQL As New Text.StringBuilder
        SQL.Append(" INSERT INTO OverrideHistory ")
        SQL.Append("    ( ")
        SQL.Append("    [OverrideId], ")
        SQL.Append("    [OverrideCode], ")
        SQL.Append("    [UserId], ")
        SQL.Append("    [SupervisorId], ")
        SQL.Append("    [Status], ")
        SQL.Append("    [RequestDate], ")
        SQL.Append("    [UpdateDate]) ")
        SQL.Append(" VALUES ")
        SQL.Append("    ( ")
        SQL.Append("    @OverrideId, ")
        SQL.Append("    @OverrideCode, ")
        SQL.Append("    @UserId, ")
        SQL.Append("    @SupervisorId, ")
        SQL.Append("    @Status, ")
        SQL.Append("    @RequestDate, ")
        SQL.Append("    @UpdateDate) ")

        Dim Command As SqlClient.SqlCommand = Adapter.Command()

        Command.CommandType = CommandType.Text
        Command.CommandText = SQL.ToString
        Command.Parameters.AddWithValue("SequenceNo", StructObj.SequenceNo)
        Command.Parameters.AddWithValue("OverrideId", StructObj.OverrideId)
        Command.Parameters.AddWithValue("OverrideCode", StructObj.OverrideCode)
        Command.Parameters.AddWithValue("UserId", StructObj.UserId)
        Command.Parameters.AddWithValue("SupervisorId", StructObj.SupervisorId)
        Command.Parameters.AddWithValue("Status", StructObj.Status)
        Command.Parameters.AddWithValue("RequestDate", StructObj.RequestDate)
        Command.Parameters.AddWithValue("UpdateDate", StructObj.UpdateDate)

        Try
            Dim Counter As Integer = Command.ExecuteNonQuery()
            If Counter <> 1 Then
                Throw New CBusinessException(CErrorCode.DATABASE_INSERT_FAIL, "0 Record Inserted")
            End If
         Command = Adapter.Command()
         Command.CommandText = "SELECT @@Identity FROM OverrideHistory"
         Dim Identity As Integer = Command.ExecuteScalar()
         StructObj.SequenceNo = Identity
        Catch ex As Exception
            CLog.Err(ex.Message)
            Throw New CBusinessException(CErrorCode.DATABASE_INSERT_FAIL, ex)
        End Try
    End Sub

    Public Sub Update(ByVal Adapter As IDatabaseAdapter, ByRef Obj As Object) _
        Implements IDatabaseAccess.Update

        Dim StructObj As COverrideHistoryStruct = TryCast(Obj, COverrideHistoryStruct)

        Dim SQL As New Text.StringBuilder
        SQL.Append(" UPDATE OverrideHistory ")
        SQL.Append(" SET ")
        SQL.Append("     [OverrideId] = @OverrideId, ")
        SQL.Append("     [OverrideCode] = @OverrideCode, ")
        SQL.Append("     [UserId] = @UserId, ")
        SQL.Append("     [SupervisorId] = @SupervisorId, ")
        SQL.Append("     [Status] = @Status, ")
        SQL.Append("     [RequestDate] = @RequestDate, ")
        SQL.Append("     [UpdateDate] = @UpdateDate ")
        SQL.Append(" WHERE ")
        SQL.Append("     [SequenceNo] = @SequenceNo ")

        Dim Command As SqlClient.SqlCommand = Adapter.Command()

        Command.CommandType = CommandType.Text
        Command.CommandText = SQL.ToString
        Command.Parameters.AddWithValue("SequenceNo", StructObj.SequenceNo)
        Command.Parameters.AddWithValue("OverrideId", StructObj.OverrideId)
        Command.Parameters.AddWithValue("OverrideCode", StructObj.OverrideCode)
        Command.Parameters.AddWithValue("UserId", StructObj.UserId)
        Command.Parameters.AddWithValue("SupervisorId", StructObj.SupervisorId)
        Command.Parameters.AddWithValue("Status", StructObj.Status)
        Command.Parameters.AddWithValue("RequestDate", StructObj.RequestDate)
        Command.Parameters.AddWithValue("UpdateDate", StructObj.UpdateDate)

        Try
            Dim Counter As Integer = Command.ExecuteNonQuery()
            If Counter <> 1 Then
                Throw New CBusinessException(CErrorCode.DATABASE_UPDATE_FAIL, "0 Record Updated")
            End If
        Catch ex As Exception
            CLog.Err(ex.Message)
            Throw New CBusinessException(CErrorCode.DATABASE_UPDATE_FAIL, ex)
        End Try
    End Sub

    Public Sub Remove(ByVal Adapter As IDatabaseAdapter, ByRef Obj As Object) _
        Implements IDatabaseAccess.Remove

        Dim StructObj As COverrideHistoryStruct = TryCast(Obj, COverrideHistoryStruct)

        Dim SQL As New Text.StringBuilder
        SQL.Append(" DELETE FROM OverrideHistory ")
        SQL.Append(" WHERE ")
        SQL.Append("     [SequenceNo] = @SequenceNo ")

        Dim Command As SqlClient.SqlCommand = Adapter.Command

        Command.CommandType = CommandType.Text
        Command.CommandText = SQL.ToString
        Command.Parameters.AddWithValue("SequenceNo", StructObj.SequenceNo)

        Try
            Dim Counter As Integer = Command.ExecuteNonQuery()
            If Counter <> 1 Then
                Throw New CBusinessException(CErrorCode.DATABASE_UPDATE_FAIL, "0 Record Deleted")
            End If
        Catch ex As Exception
            CLog.Err(ex.Message)
            Throw New CBusinessException(CErrorCode.DATABASE_DELETE_FAIL, ex)
        End Try
    End Sub

    Public Sub Search(ByVal Adapter As IDatabaseAdapter, _
                           ByRef Obj As Object, ByVal Lock As Boolean?) Implements IDatabaseAccess.Search

        Dim StructObj As COverrideHistoryStruct = TryCast(Obj, COverrideHistoryStruct)

        Dim SQL As New Text.StringBuilder
        SQL.Append(" SELECT ")
        SQL.Append("    [SequenceNo], ")
        SQL.Append("    [OverrideId], ")
        SQL.Append("    [OverrideCode], ")
        SQL.Append("    [UserId], ")
        SQL.Append("    [SupervisorId], ")
        SQL.Append("    [Status], ")
        SQL.Append("    [RequestDate], ")
        SQL.Append("    [UpdateDate] ")
        SQL.Append(" FROM ")
        SQL.Append("     OverrideHistory ")
        If Lock Is Nothing Then
            SQL.Append(" WITH (NOLOCK) ")
        ElseIf Lock = True Then
            SQL.Append(" WITH (ROWLOCK) ")
        End If
        SQL.Append(" WHERE")
        SQL.Append("     [SequenceNo] = @SequenceNo ")

        Dim Command As SqlClient.SqlCommand = Adapter.Command

        Command.CommandType = CommandType.Text
        Command.CommandText = SQL.ToString
        Command.Parameters.AddWithValue("SequenceNo", StructObj.SequenceNo)

        Dim SQLAdapter As SqlClient.SqlDataAdapter = Adapter.Adapter
        SQLAdapter.SelectCommand = Command

        Dim Data As New DataSet
        Try
            SQLAdapter.Fill(Data)
        Catch ex As Exception
            CLog.Err(ex.Message)
            Throw New CBusinessException(CErrorCode.DATABASE_QUERY_FAIL, ex)
        End Try

        Dim Row As Data.DataRowCollection = Data.Tables(0).Rows
        If Row.Count = 0 Then
            Throw New CBusinessException(CErrorCode.RECORD_NOT_FOUND, "Record Not Found")
        End If

        If Not IsDBNull(Row(0).Item(0)) Then StructObj.SequenceNo = Row(0).Item(0)
        If Not IsDBNull(Row(0).Item(1)) Then StructObj.OverrideId = Row(0).Item(1)
        If Not IsDBNull(Row(0).Item(2)) Then StructObj.OverrideCode = Row(0).Item(2)
        If Not IsDBNull(Row(0).Item(3)) Then StructObj.UserId = Row(0).Item(3)
        If Not IsDBNull(Row(0).Item(4)) Then StructObj.SupervisorId = Row(0).Item(4)
        If Not IsDBNull(Row(0).Item(5)) Then StructObj.Status = Row(0).Item(5)
        If Not IsDBNull(Row(0).Item(6)) Then StructObj.RequestDate = Row(0).Item(6)
        If Not IsDBNull(Row(0).Item(7)) Then StructObj.UpdateDate = Row(0).Item(7)
    End Sub

    Public Sub SearchAll(ByVal Adapter As IDatabaseAdapter, _
                         ByRef DatabaseObj As List(Of Object)) Implements IDatabaseAccess.SearchAll

        Dim SQL As New Text.StringBuilder
        SQL.Append(" SELECT ")
        SQL.Append("    [SequenceNo], ")
        SQL.Append("    [OverrideId], ")
        SQL.Append("    [OverrideCode], ")
        SQL.Append("    [UserId], ")
        SQL.Append("    [SupervisorId], ")
        SQL.Append("    [Status], ")
        SQL.Append("    [RequestDate], ")
        SQL.Append("    [UpdateDate] ")
        SQL.Append(" FROM ")
        SQL.Append("     OverrideHistory ")

        Dim Command As SqlClient.SqlCommand = Adapter.Command

        Command.CommandType = CommandType.Text
        Command.CommandText = SQL.ToString

        Dim SQLAdapter As SqlClient.SqlDataAdapter = Adapter.Adapter
        SQLAdapter.SelectCommand = Command

        Dim Data As New DataSet
        Try
            SQLAdapter.Fill(Data)
        Catch ex As Exception
            CLog.Err(ex.Message)
            Throw New CBusinessException(CErrorCode.DATABASE_QUERY_FAIL, ex)
        End Try

        Dim Rows As Data.DataRowCollection = Data.Tables(0).Rows
        If Rows.Count = 0 Then
            Throw New CBusinessException(CErrorCode.RECORD_NOT_FOUND, "Record Not Found")
        End If

        For Each Row As DataRow In Rows
            Dim StructObj As New COverrideHistoryStruct
            If Not IsDBNull(Row.Item(0)) Then StructObj.SequenceNo = Row.Item(0)
            If Not IsDBNull(Row.Item(1)) Then StructObj.OverrideId = Row.Item(1)
            If Not IsDBNull(Row.Item(2)) Then StructObj.OverrideCode = Row.Item(2)
            If Not IsDBNull(Row.Item(3)) Then StructObj.UserId = Row.Item(3)
            If Not IsDBNull(Row.Item(4)) Then StructObj.SupervisorId = Row.Item(4)
            If Not IsDBNull(Row.Item(5)) Then StructObj.Status = Row.Item(5)
            If Not IsDBNull(Row.Item(6)) Then StructObj.RequestDate = Row.Item(6)
            If Not IsDBNull(Row.Item(7)) Then StructObj.UpdateDate = Row.Item(7)
            DatabaseObj.Add(StructObj)
        Next
    End Sub

    Public Sub SearchByOverrideId(ByVal Adapter As IDatabaseAdapter, _
                                      ByVal Obj As COverrideHistoryStruct, _
                                      ByRef OverrideHistoryList As List(Of Object), _
                                      ByVal Lock As Boolean?) _

        Dim StructObj As COverrideHistoryStruct = TryCast(Obj, COverrideHistoryStruct)
        OverrideHistoryList.Clear()

        Dim SQL As New Text.StringBuilder
        SQL.Append(" SELECT ")
        If StructObj.MaxRecord > 0 Then SQL.Append(" TOP " & StructObj.MaxRecord)
        SQL.Append("    [SequenceNo], ")
        SQL.Append("    [OverrideId], ")
        SQL.Append("    [OverrideCode], ")
        SQL.Append("    [UserId], ")
        SQL.Append("    [SupervisorId], ")
        SQL.Append("    [Status], ")
        SQL.Append("    [RequestDate], ")
        SQL.Append("    [UpdateDate]  ")
        SQL.Append(" FROM ")
        SQL.Append("     OverrideHistory ")
        If Lock Is Nothing Then
            SQL.Append(" WITH (NOLOCK) ")
        ElseIf Lock = True Then
            SQL.Append(" WITH (ROWLOCK) ")
        End If
        SQL.Append(" WHERE ")
        SQL.Append("     ( ")
        SQL.Append("     [OverrideId] = ")
        SQL.Append("       @OverrideId ")
        SQL.Append("     ) ")

        Dim Command As SqlClient.SqlCommand = Adapter.Command

        Command.CommandType = CommandType.Text
        Command.CommandText = SQL.ToString
        Command.Parameters.AddWithValue("OverrideId", StructObj.OverrideId)

        Dim SQLAdapter As SqlClient.SqlDataAdapter = Adapter.Adapter
        SQLAdapter.SelectCommand = Command

        Dim Data As New DataSet
        Try
            SQLAdapter.Fill(Data)
        Catch ex As Exception
            CLog.Err(ex.Message)
            Throw New CBusinessException(CErrorCode.DATABASE_QUERY_FAIL, ex)
        End Try

        Dim Row As DataRowCollection = Data.Tables(0).Rows
        If Row.Count = 0 Then
            Throw New CBusinessException(CErrorCode.RECORD_NOT_FOUND, "Record Not Found")
        End If

        For Idx As Integer = 0 To Data.Tables(0).Rows.Count - 1
            Dim DBStruct As New COverrideHistoryStruct

            If Not IsDBNull(Row(Idx).Item(0)) Then DBStruct.SequenceNo = Row(Idx).Item(0)
            If Not IsDBNull(Row(Idx).Item(1)) Then DBStruct.OverrideId = Row(Idx).Item(1)
            If Not IsDBNull(Row(Idx).Item(2)) Then DBStruct.OverrideCode = Row(Idx).Item(2)
            If Not IsDBNull(Row(Idx).Item(3)) Then DBStruct.UserId = Row(Idx).Item(3)
            If Not IsDBNull(Row(Idx).Item(4)) Then DBStruct.SupervisorId = Row(Idx).Item(4)
            If Not IsDBNull(Row(Idx).Item(5)) Then DBStruct.Status = Row(Idx).Item(5)
            If Not IsDBNull(Row(Idx).Item(6)) Then DBStruct.RequestDate = Row(Idx).Item(6)
            If Not IsDBNull(Row(Idx).Item(7)) Then DBStruct.UpdateDate = Row(Idx).Item(7)

            OverrideHistoryList.Add(DBStruct)
        Next

    End Sub

    Public Function Count(ByVal Adapter As IDatabaseAdapter) As Integer Implements IDatabaseAccess.Count

        Dim SQL As New Text.StringBuilder
        SQL.Append(" SELECT ")
        SQL.Append("     COUNT(*) ")
        SQL.Append(" FROM ")
        SQL.Append("     OverrideHistory ")

        Dim Command As SqlClient.SqlCommand = Adapter.Command

        Command.CommandType = CommandType.Text
        Command.CommandText = SQL.ToString
        
        Try
            Dim Counter As Integer = Command.ExecuteScalar()
            Return Count
        Catch ex As Exception
            CLog.Err(ex.Message)
            Throw New CBusinessException(CErrorCode.DATABASE_QUERY_FAIL, ex)
        End Try
        
    End Function

    Public ReadOnly Property Name As String Implements IComponent.Name
        Get
            Return "SQLServer_OverrideHistory"
        End Get
    End Property

End Class

