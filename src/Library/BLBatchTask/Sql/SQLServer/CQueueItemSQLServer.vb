''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' File          : CQueueItem.vb
' Class         : CQueueItem
' Description   : Table    QueueItem
'               : Database SQLServer
'               : This Class is Generated By DBCG Tools Automatically
' Author        : Su Jia
' Creation Ver  : 2.1.0.0
'
' Revision History
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Version       Date                 User
' $Log: CQueueItem.vb,v $
' Revision 1.0  2012/08/24           Su Jia
' Initial Version
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Imports ServerPlatform.Library.Utility
Imports ServerPlatform.Library.Workflow.CError

Public Class CQueueItemSQLServer
    Inherits CQueueItemStruct
    Implements IDatabaseAccess
    Implements IComponent

    Public Sub Insert(ByVal Adapter As IDatabaseAdapter, ByRef Obj As Object) _
        Implements IDatabaseAccess.Insert

        Dim StructObj As CQueueItemStruct = TryCast(Obj, CQueueItemStruct)

        Dim SQL As New Text.StringBuilder
        SQL.Append(" INSERT INTO QueueItem ")
        SQL.Append("    ( ")
        SQL.Append("    [QueueID], ")
        SQL.Append("    [Description], ")
        SQL.Append("    [XMLDocument], ")
        SQL.Append("    [Priority], ")
        SQL.Append("    [DateAdded], ")
        SQL.Append("    [DateProcessed], ")
        SQL.Append("    [Status], ")
        SQL.Append("    [SenderTellerID], ")
        SQL.Append("    [ProcessorTellerID], ")
        SQL.Append("    [Capability], ")
        SQL.Append("    [TimeAdded], ")
        SQL.Append("    [DateExpired], ")
        SQL.Append("    [OriginalItemID]) ")
        SQL.Append(" VALUES ")
        SQL.Append("    ( ")
        SQL.Append("    @QueueID, ")
        SQL.Append("    @Description, ")
        SQL.Append("    @XMLDocument, ")
        SQL.Append("    @Priority, ")
        SQL.Append("    @DateAdded, ")
        SQL.Append("    @DateProcessed, ")
        SQL.Append("    @Status, ")
        SQL.Append("    @SenderTellerID, ")
        SQL.Append("    @ProcessorTellerID, ")
        SQL.Append("    @Capability, ")
        SQL.Append("    @TimeAdded, ")
        SQL.Append("    @DateExpired, ")
        SQL.Append("    @OriginalItemID) ")

        Dim Command As SqlClient.SqlCommand = Adapter.Command()

        Command.CommandType = CommandType.Text
        Command.CommandText = SQL.ToString
        Command.Parameters.AddWithValue("QueueID", StructObj.QueueID)
        Command.Parameters.AddWithValue("Description", StructObj.Description)
        Command.Parameters.AddWithValue("XMLDocument", StructObj.XMLDocument)
        Command.Parameters.AddWithValue("Priority", StructObj.Priority)
        Command.Parameters.AddWithValue("DateAdded", StructObj.DateAdded)
        Command.Parameters.AddWithValue("DateProcessed", StructObj.DateProcessed)
        Command.Parameters.AddWithValue("Status", StructObj.Status)
        Command.Parameters.AddWithValue("SenderTellerID", StructObj.SenderTellerID)
        Command.Parameters.AddWithValue("ProcessorTellerID", StructObj.ProcessorTellerID)
        Command.Parameters.AddWithValue("Capability", StructObj.Capability)
        Command.Parameters.AddWithValue("TimeAdded", StructObj.TimeAdded)
        Command.Parameters.AddWithValue("DateExpired", StructObj.DateExpired)
        Command.Parameters.AddWithValue("OriginalItemID", StructObj.OriginalItemID)

        Try
            Dim Counter As Integer = Command.ExecuteNonQuery()
            If Counter <> 1 Then
                Throw New CBusinessException(CErrorCode.DATABASE_INSERT_FAIL, "0 Record Inserted")
            End If
        Catch ex As Exception
            CLog.Err(ex.Message)
            Throw New CBusinessException(CErrorCode.DATABASE_INSERT_FAIL, ex)
        End Try
    End Sub

    Public Sub Update(ByVal Adapter As IDatabaseAdapter, ByRef Obj As Object) _
        Implements IDatabaseAccess.Update

        Dim StructObj As CQueueItemStruct = TryCast(Obj, CQueueItemStruct)

        Dim SQL As New Text.StringBuilder
        SQL.Append(" UPDATE QueueItem ")
        SQL.Append(" SET ")
        SQL.Append("     [QueueID] = @QueueID, ")
        SQL.Append("     [Description] = @Description, ")
        SQL.Append("     [XMLDocument] = @XMLDocument, ")
        SQL.Append("     [Priority] = @Priority, ")
        SQL.Append("     [DateAdded] = @DateAdded, ")
        SQL.Append("     [DateProcessed] = @DateProcessed, ")
        SQL.Append("     [Status] = @Status, ")
        SQL.Append("     [SenderTellerID] = @SenderTellerID, ")
        SQL.Append("     [ProcessorTellerID] = @ProcessorTellerID, ")
        SQL.Append("     [Capability] = @Capability, ")
        SQL.Append("     [TimeAdded] = @TimeAdded, ")
        SQL.Append("     [DateExpired] = @DateExpired, ")
        SQL.Append("     [OriginalItemID] = @OriginalItemID ")
        SQL.Append(" WHERE ")

        Dim Command As SqlClient.SqlCommand = Adapter.Command()

        Command.CommandType = CommandType.Text
        Command.CommandText = SQL.ToString
        Command.Parameters.AddWithValue("QueueID", StructObj.QueueID)
        Command.Parameters.AddWithValue("Description", StructObj.Description)
        Command.Parameters.AddWithValue("XMLDocument", StructObj.XMLDocument)
        Command.Parameters.AddWithValue("Priority", StructObj.Priority)
        Command.Parameters.AddWithValue("DateAdded", StructObj.DateAdded)
        Command.Parameters.AddWithValue("DateProcessed", StructObj.DateProcessed)
        Command.Parameters.AddWithValue("Status", StructObj.Status)
        Command.Parameters.AddWithValue("SenderTellerID", StructObj.SenderTellerID)
        Command.Parameters.AddWithValue("ProcessorTellerID", StructObj.ProcessorTellerID)
        Command.Parameters.AddWithValue("Capability", StructObj.Capability)
        Command.Parameters.AddWithValue("TimeAdded", StructObj.TimeAdded)
        Command.Parameters.AddWithValue("DateExpired", StructObj.DateExpired)
        Command.Parameters.AddWithValue("OriginalItemID", StructObj.OriginalItemID)

        Try
            Dim Counter As Integer = Command.ExecuteNonQuery()
            If Counter <> 1 Then
                Throw New CBusinessException(CErrorCode.DATABASE_UPDATE_FAIL, "0 Record Updated")
            End If
        Catch ex As Exception
            CLog.Err(ex.Message)
            Throw New CBusinessException(CErrorCode.DATABASE_UPDATE_FAIL, ex)
        End Try
    End Sub

    Public Sub Remove(ByVal Adapter As IDatabaseAdapter, ByRef Obj As Object) _
        Implements IDatabaseAccess.Remove

        Dim StructObj As CQueueItemStruct = TryCast(Obj, CQueueItemStruct)

        Dim SQL As New Text.StringBuilder
        SQL.Append(" DELETE FROM QueueItem ")
        SQL.Append(" WHERE ")

        Dim Command As SqlClient.SqlCommand = Adapter.Command

        Command.CommandType = CommandType.Text
        Command.CommandText = SQL.ToString

        Try
            Dim Counter As Integer = Command.ExecuteNonQuery()
            If Counter <> 1 Then
                Throw New CBusinessException(CErrorCode.DATABASE_UPDATE_FAIL, "0 Record Deleted")
            End If
        Catch ex As Exception
            CLog.Err(ex.Message)
            Throw New CBusinessException(CErrorCode.DATABASE_DELETE_FAIL, ex)
        End Try
    End Sub

    Public Sub Search(ByVal Adapter As IDatabaseAdapter, _
                           ByRef Obj As Object, ByVal Lock As Boolean?) Implements IDatabaseAccess.Search

        Dim StructObj As CQueueItemStruct = TryCast(Obj, CQueueItemStruct)

        Dim SQL As New Text.StringBuilder
        SQL.Append(" SELECT ")
        SQL.Append("    [QueueID], ")
        SQL.Append("    [Description], ")
        SQL.Append("    [XMLDocument], ")
        SQL.Append("    [Priority], ")
        SQL.Append("    [DateAdded], ")
        SQL.Append("    [DateProcessed], ")
        SQL.Append("    [Status], ")
        SQL.Append("    [SenderTellerID], ")
        SQL.Append("    [ProcessorTellerID], ")
        SQL.Append("    [Capability], ")
        SQL.Append("    [TimeAdded], ")
        SQL.Append("    [DateExpired], ")
        SQL.Append("    [OriginalItemID] ")
        SQL.Append(" FROM ")
        SQL.Append("     QueueItem ")
        If Lock Is Nothing Then
            SQL.Append(" WITH (NOLOCK) ")
        ElseIf Lock = True Then
            SQL.Append(" WITH (ROWLOCK) ")
        End If
        SQL.Append(" WHERE")

        Dim Command As SqlClient.SqlCommand = Adapter.Command

        Command.CommandType = CommandType.Text
        Command.CommandText = SQL.ToString

        Dim SQLAdapter As SqlClient.SqlDataAdapter = Adapter.Adapter
        SQLAdapter.SelectCommand = Command

        Dim Data As New DataSet
        Try
            SQLAdapter.Fill(Data)
        Catch ex As Exception
            CLog.Err(ex.Message)
            Throw New CBusinessException(CErrorCode.DATABASE_QUERY_FAIL, ex)
        End Try

        Dim Row As Data.DataRowCollection = Data.Tables(0).Rows
        If Row.Count = 0 Then
            Throw New CBusinessException(CErrorCode.RECORD_NOT_FOUND, "Record Not Found")
        End If

        If Not IsDBNull(Row(0).Item(0)) Then StructObj.QueueID = Row(0).Item(0)
        If Not IsDBNull(Row(0).Item(1)) Then StructObj.Description = Row(0).Item(1)
        If Not IsDBNull(Row(0).Item(2)) Then StructObj.XMLDocument = Row(0).Item(2)
        If Not IsDBNull(Row(0).Item(3)) Then StructObj.Priority = Row(0).Item(3)
        If Not IsDBNull(Row(0).Item(4)) Then StructObj.DateAdded = Row(0).Item(4)
        If Not IsDBNull(Row(0).Item(5)) Then StructObj.DateProcessed = Row(0).Item(5)
        If Not IsDBNull(Row(0).Item(6)) Then StructObj.Status = Row(0).Item(6)
        If Not IsDBNull(Row(0).Item(7)) Then StructObj.SenderTellerID = Row(0).Item(7)
        If Not IsDBNull(Row(0).Item(8)) Then StructObj.ProcessorTellerID = Row(0).Item(8)
        If Not IsDBNull(Row(0).Item(9)) Then StructObj.Capability = Row(0).Item(9)
        If Not IsDBNull(Row(0).Item(10)) Then StructObj.TimeAdded = Row(0).Item(10)
        If Not IsDBNull(Row(0).Item(11)) Then StructObj.DateExpired = Row(0).Item(11)
        If Not IsDBNull(Row(0).Item(12)) Then StructObj.OriginalItemID = Row(0).Item(12)
    End Sub

    Public Sub SearchAll(ByVal Adapter As IDatabaseAdapter, _
                         ByRef DatabaseObj As List(Of Object)) Implements IDatabaseAccess.SearchAll

        Dim SQL As New Text.StringBuilder
        SQL.Append(" SELECT ")
        SQL.Append("    [QueueID], ")
        SQL.Append("    [Description], ")
        SQL.Append("    [XMLDocument], ")
        SQL.Append("    [Priority], ")
        SQL.Append("    [DateAdded], ")
        SQL.Append("    [DateProcessed], ")
        SQL.Append("    [Status], ")
        SQL.Append("    [SenderTellerID], ")
        SQL.Append("    [ProcessorTellerID], ")
        SQL.Append("    [Capability], ")
        SQL.Append("    [TimeAdded], ")
        SQL.Append("    [DateExpired], ")
        SQL.Append("    [OriginalItemID] ")
        SQL.Append(" FROM ")
        SQL.Append("     QueueItem ")

        Dim Command As SqlClient.SqlCommand = Adapter.Command

        Command.CommandType = CommandType.Text
        Command.CommandText = SQL.ToString

        Dim SQLAdapter As SqlClient.SqlDataAdapter = Adapter.Adapter
        SQLAdapter.SelectCommand = Command

        Dim Data As New DataSet
        Try
            SQLAdapter.Fill(Data)
        Catch ex As Exception
            CLog.Err(ex.Message)
            Throw New CBusinessException(CErrorCode.DATABASE_QUERY_FAIL, ex)
        End Try

        Dim Rows As Data.DataRowCollection = Data.Tables(0).Rows
        If Rows.Count = 0 Then
            Throw New CBusinessException(CErrorCode.RECORD_NOT_FOUND, "Record Not Found")
        End If

        For Each Row As DataRow In Rows
            Dim StructObj As New CQueueItemStruct
            If Not IsDBNull(Row.Item(0)) Then StructObj.QueueID = Row.Item(0)
            If Not IsDBNull(Row.Item(1)) Then StructObj.Description = Row.Item(1)
            If Not IsDBNull(Row.Item(2)) Then StructObj.XMLDocument = Row.Item(2)
            If Not IsDBNull(Row.Item(3)) Then StructObj.Priority = Row.Item(3)
            If Not IsDBNull(Row.Item(4)) Then StructObj.DateAdded = Row.Item(4)
            If Not IsDBNull(Row.Item(5)) Then StructObj.DateProcessed = Row.Item(5)
            If Not IsDBNull(Row.Item(6)) Then StructObj.Status = Row.Item(6)
            If Not IsDBNull(Row.Item(7)) Then StructObj.SenderTellerID = Row.Item(7)
            If Not IsDBNull(Row.Item(8)) Then StructObj.ProcessorTellerID = Row.Item(8)
            If Not IsDBNull(Row.Item(9)) Then StructObj.Capability = Row.Item(9)
            If Not IsDBNull(Row.Item(10)) Then StructObj.TimeAdded = Row.Item(10)
            If Not IsDBNull(Row.Item(11)) Then StructObj.DateExpired = Row.Item(11)
            If Not IsDBNull(Row.Item(12)) Then StructObj.OriginalItemID = Row.Item(12)
            DatabaseObj.Add(StructObj)
        Next
    End Sub

    Public Function Count(ByVal Adapter As IDatabaseAdapter) As Integer Implements IDatabaseAccess.Count

        Dim SQL As New Text.StringBuilder
        SQL.Append(" SELECT ")
        SQL.Append("     COUNT(*) ")
        SQL.Append(" FROM ")
        SQL.Append("     QueueItem ")

        Dim Command As SqlClient.SqlCommand = Adapter.Command

        Command.CommandType = CommandType.Text
        Command.CommandText = SQL.ToString
        
        Try
            Dim Counter As Integer = Command.ExecuteScalar()
            Return Count
        Catch ex As Exception
            CLog.Err(ex.Message)
            Throw New CBusinessException(CErrorCode.DATABASE_QUERY_FAIL, ex)
        End Try
        
    End Function

    Public ReadOnly Property Name As String Implements IComponent.Name
        Get
            Return "SQLServer_QueueItem"
        End Get
    End Property

End Class

